# -*- coding: utf-8 -*-
"""REAL ESTATE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sXvweVTzIxqwlOZ6jMIIHA4rmC32Nhin
"""

import pandas as pd
import numpy as np
import seaborn as sb
import matplotlib.pyplot  as plt
import tensorflow as tf

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv("/content/drive/MyDrive/Real estate.csv")
data

df=data.copy()
df

"""**DESCRIPTIVE ANALYSIS**"""

data.head()

df.describe()

df.shape

df.info()

"""##DATA CLEANSING AND TRANSFORMATION"""

df.isnull().sum()

df=df.rename(columns={'X1 transaction date':'Transaction date','X2 house age':'House age',
                   'X3 distance to the nearest MRT station':'Distance to the nearest MRT station',
                   'X4 number of convenience stores':'No of convenience stores','X5 latitude':'Latitude','X6 longitude':'Longitude',
                   'Y house price of unit area':'Price'})

df

df.drop(labels=['No'],axis=1,inplace=True)

df

"""##EXPLORATORY DATA ANALYSIS"""

#!pip install sweetviz

import sweetviz as  sv
report=sv.analyze(df)
report.show_html('./report.html')

sb.pairplot(df)
plt.show()

sb.heatmap(df)

sb.heatmap(df.isnull())

plt.subplots(figsize=(9,5))
sb.heatmap(df.corr(),annot=True)

"""###SEPERATING THE INDEPENDENT AND DEPENDENT VARIABLES"""

df

y = df.pop('Price')
x = df

y.head()

x.head()

"""###SPLITTING DATA INTO TRAINING AND TESTING DATASETS"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

print('x_train shape:',x_train.shape,'\nx_test shape:',x_test.shape,
      '\ny_train shape:',y_train.shape,'\ny_test shape:',y_test.shape)

"""###RANDOM FOREST REGRESSOR"""

from sklearn.ensemble import RandomForestRegressor
model=RandomForestRegressor()
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

#model accuracy
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error,mean_absolute_error

print(r2_score(y_test,y_pred)*100)

mse = mean_squared_error(y_test, y_pred)
print(mse)
mae=mean_absolute_error(y_test,y_pred)
print(mae)

# Plotting y_test and y_pred to understand the spread.
fig = plt.figure()
plt.scatter(y_test,y_pred)
fig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading
plt.xlabel('y_test', fontsize=18)                          # X-label
plt.ylabel('y_pred', fontsize=16)                          # Y-label

"""##LINEAR REGRESSION"""

X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size=0.1, random_state=101)

print('X_train shape:',X_train.shape,'\nX_test shape:',X_test.shape,
      '\nY_train shape:',Y_train.shape,'\nY_test shape:',Y_test.shape)

from sklearn.linear_model import LinearRegression
model1=LinearRegression()

model1.fit(X_train, Y_train)

Y_pred = model1.predict(X_test)

r2_score(Y_test,Y_pred)

MAE=mean_absolute_error(Y_test, Y_pred)
MSE=mean_squared_error(Y_test, Y_pred)
print('MAE: ',MAE,'\nMSE: ',MSE)

# Plotting y_test and y_pred to understand the spread.
fig = plt.figure()
plt.scatter(Y_test,Y_pred)
fig.suptitle('Y_test vs Y_pred', fontsize=20)              # Plot heading
plt.xlabel('Y_test', fontsize=18)                          # X-label
plt.ylabel('Y_pred', fontsize=16)                          # Y-label

"""##DECISION TREE REGRESSION"""

X1_train, X1_test, Y1_train, Y1_test = train_test_split(x,y, test_size=0.1, random_state=101)

print('X1_train shape:',X1_train.shape,'\nX1_test shape:',X1_test.shape,
      '\nY1_train shape:',Y1_train.shape,'\nY1_test shape:',Y1_test.shape)

from sklearn.tree import DecisionTreeRegressor
model2=DecisionTreeRegressor()

model2.fit(X1_train,Y1_train)

Y1_pred=model2.predict(X1_test)

r2_score(Y1_test,Y1_pred)

MAE=mean_absolute_error(Y_test, Y_pred)
MSE=mean_squared_error(Y_test, Y_pred)
RMSE= np.sqrt(MSE)
print('MAE: ',MAE,'\nMSE: ',MSE,'\nRMSE: ',RMSE)
